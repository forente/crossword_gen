package core.history;
//*******1*********2*********3*********4*********5*********6*********7*********8

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import te.TeluguWordProcessor;
import core.Config;
//import core.Config;
import core.Language;
//import core.WordProcessor;

/**
 * A class representing a single word search puzzle
 * 
 * Generated by JasthiGUI.java
 * 
 */
public class Puzzle
{

	private String id;
	private String title;
	private Language language;
	private ArrayList<String> wordList;
	private String[][] puzzleGrid;
	private int gridWidth; // derived
	private int gridHeight; // derived

	/**
	 * Implementation of a Puzzle object to initalize internal values.
	 * @param an_id, a String value
	 * @param a_title, a String value
	 * @param a_language, a Language object
	 * @param a_word_list, an ArrayList<String>
	 * @param puzzleGrid, a 2d array of String values
	 * @param a_gridWidth, a integer value
	 * @param a_gridHeight, a integer value
	 */
	public Puzzle(String an_id, String a_title, Language a_language, ArrayList<String> a_word_list,
			String[][] puzzleGrid, int a_gridWidth, int a_gridHeight)
	{
		id = an_id;
		title = a_title;
		language = a_language;
		wordList = a_word_list;
		this.puzzleGrid = puzzleGrid;
		gridWidth = a_gridWidth;
		gridHeight = a_gridHeight;
		
		sort_WordList();
	}
	
	/**
	 * Implmentation used for cloning a Puzzle object.
	 * @param puzzle, a Puzzle object
	 */
	public Puzzle(Puzzle puzzle) {
		this.id = puzzle.id;
		this.title = puzzle.title;
		this.language = puzzle.language;
		this.wordList = puzzle.wordList;
		this.puzzleGrid = puzzle.puzzleGrid;
		this.gridWidth = puzzle.gridWidth;
		this.gridHeight = puzzle.gridHeight;
	}

	/**
	 * Method for returning the word list
	 * 
	 * @return
	 */
	public ArrayList<String> getWordList()
	{	
		return this.wordList;
	}
	
	/**
	 * 
	 * @return wordlist as a string value
	 */
	public String getWordListAsString() {
		String listString = new String();
		for(String s: wordList) {
			listString += s +", ";
		}		
		return listString.substring(0, listString.length()-2);
	}
	

	/**
	 * Set method for the variable id
	 */
	public void setId(String a_id)
	{
		id = a_id;
	}

	/**
	 * Set method for the variable title
	 */
	public void setTitle(String a_title)
	{
		title = a_title;
	}

	/**
	 * Get method for the variable id
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Get method for the variable title
	 */
	public String getTitle()
	{
		return title;
	}
	
	/**
	 * Set method for the language
	 */
	public void setLanguage(Language a_language)
	{
		language = a_language;
	}
	
	/**
	 * Get method for variable language
	 */
	public Language getLanguage()
	{
		return language;
	}

	/**
	 * Set method for the variable gridWidth
	 */
	public void setGridWidth(int a_grid_width)
	{
		gridWidth = a_grid_width;
	}

	/**
	 * Set method for the variable gridHeight
	 */
	public void setGridHeight(int a_grid_height)
	{
		gridHeight = a_grid_height;
	}

	/**
	 * Set method for the variable wordList
	 */
	public void setWordList(ArrayList<String> a_word_list)
	{
		wordList = a_word_list;
	}
	
	/**
	 * Set method for the variable puzzleGrid
	 */
	public void setPuzzleGrid(String[][] a_puzzle_grid)
	{
		puzzleGrid = a_puzzle_grid;
	}

	/**
	 * Get method for the variable gridWidth
	 */
	public int getGridWidth()
	{
		return gridWidth;
	}

	/**
	 * Get method for the variable gridHeight
	 */
	public int getGridHeight()
	{
		return gridHeight;
	}

	/**
	 * Get method for the variable answerGrid
	 */
	public String[][] getBlankGrid()
	{
		String[][] blankGrid = new String[gridHeight][gridWidth];				
		for(int i = 0; i < gridHeight; i++) {
			for(int j = 0; j < gridWidth; j++) {
				if( !puzzleGrid[i][j].equals(Config.cellSpacer))
					blankGrid[i][j] = " ";  //TODO: This may have to change at some point
				else
					blankGrid[i][j] = "+";
			}
		}		
		return blankGrid;
	}
	
	/**
	 * Get method for the variable puzzleGrid
	 */
	public String[][] getPuzzleGrid()
	{
		return puzzleGrid;
	}

	/**
	 * Returns the String representation of Puzzle object
	 */
	public String toString()
	{
		String temp = "\nid = " + id + "\ntitle = " + title;

		return temp;
	}
	
	/**
	 * Converts a wordlist <ArrayList<String> to a wordlist of logical characters ArrayList<ArrayList<String>> using a TeluguWordProcessor
	 * @return wordListtoLogicalChars, a ArrayList<ArrayList<String>>
	 */
	private ArrayList<ArrayList<String>> wordListtoLogicalChars() {
		
		ArrayList<ArrayList<String>> wordListLogicalChars = new ArrayList<ArrayList<String>>();
//		if(language.getName().equals(Config.ENGLISH)) {
//			WordProcessor wp;
//			for(String word: wordList) {
//				wp = new WordProcessor(word);
//				wp.trim();
//				wp.stripAllSymbols();
//				wp.stripSpaces();
//				wordListLogicalChars.add(wp.getLogicalChars());				
//			}
//		} else {
			TeluguWordProcessor wp;
			for(String word: wordList) {
				wp = new TeluguWordProcessor(word);
				wp.trim();
				wp.stripAllSymbols();
				wp.stripSpaces();
				wordListLogicalChars.add(wp.getLogicalChars());
			}
//		}
		return wordListLogicalChars;
	}
	
	/**
	 * Converts a ArrayList<ArrayList<String>> back to a ArrayList<String> using a TeluguWordProcessor
	 * @param wordListArrayList a ArrayList<ArrayList<String>>
	 */
	private void logicalCharsToWordList(ArrayList<ArrayList<String>> wordListArrayList) {
		ArrayList<String> wordList = new ArrayList<String>();
		//if(language.getName().equals(Config.ENGLISH)) {
//			WordProcessor wp;
//			for(ArrayList<String> word: wordListArrayList) {
//				wp = new WordProcessor(word);
//				wordList.add(wp.getWord());
//			}
//		} else {
			TeluguWordProcessor wp;
			for(ArrayList<String> word: wordListArrayList) {
				wp = new TeluguWordProcessor(word);
				wordList.add(wp.getWord());
			}
//		}
		this.wordList = wordList;
	}
	
	private void sort_WordList() {
		ArrayList<ArrayList<String>> wlal = wordListtoLogicalChars();
		Collections.sort(wlal, new ClueComparator());
		logicalCharsToWordList(wlal);
	}
	
	/**
	 * ClueComparator sorts fillin word clues by size first and then alphabetizes the words.
	 * @author sean.ford
	 *
	 */
    class ClueComparator implements Comparator <ArrayList<String>> {

		@Override
		public int compare(ArrayList<String> clue1, ArrayList<String> clue2) {
			if(clue1.size() < clue2.size())
				return -1;
			else if(clue1.size() == clue2.size()) {
				return clue1.toString().compareTo(clue2.toString());
			}
			else
				return 1;
		}
		
	}
	
}
